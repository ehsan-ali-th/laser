//===---- LaserISelDAGToDAG.h - A Dag to Dag Inst Selector for Cpu0 --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the LASER target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LASER_CPU0ISELDAGTODAG_H
#define LLVM_LIB_TARGET_LASER_CPU0ISELDAGTODAG_H

#include "Laser.h"
#include "LaserSubtarget.h"
#include "LaserTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// lASERDAGToDAGISel - LASER specific code to select LASER machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

  class LaserDAGToDAGISel : public SelectionDAGISel {
public:
  explicit LaserDAGToDAGISel(LaserTargetMachine &tm) : SelectionDAGISel(tm) {}

    StringRef getPassName() const override {
      return "LASER DAG->DAG Pattern Instruction Selection";
    }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<LaserSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }


  protected:
    SDNode *getGlobalBaseReg();

    /// Keep a pointer to the LaserSubtarget around so that we can make the right
    /// decision when generating code for different targets.
    const LaserSubtarget *Subtarget;
   
  private:
    // Include the pieces autogenerated from the target description.
#include "LaserGenDAGISel.inc"

    /// getTargetMachine - Return a reference to the TargetMachine, casted
    /// to the target-specific type.
    const LaserTargetMachine &getTargetMachine() {
      return static_cast<const LaserTargetMachine &>(TM);
    }

    // Instruction Selection not handled by the auto-generated tablgen
    void Select(SDNode *N) override;

    std::pair<bool, SDNode*> selectNode(SDNode *Node);

    // Complex Pattern Selectors.
    bool SelectAddr(SDNode *Parent, SDValue Addr, SDValue &Base, SDValue &Offset);

    void processFunctionAfterISel(MachineFunction &MF);

  };

} // end llvm namespace

#endif
