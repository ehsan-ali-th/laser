//===-- LaserSubtarget.h - Define Subtarget for the LASER -------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the LASER specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LASER_LASERSUBTARGET_H
#define LLVM_LIB_TARGET_LASER_LASERSUBTARGET_H

#include "LaserFrameLowering.h"
#include "LaserISelLowering.h"
#include "LaserInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "LaserGenSubtargetInfo.inc"

namespace llvm {
  class StringRef;

  class LaserTargetMachine;

  class LaserSubtarget : public LaserGenSubtargetInfo {
    virtual void anchor();

  protected:
    enum LaserArchEnum {
      LaserGeneric
    };

    LaserArchEnum LaserArchVersion;

    bool IsLittle;

    InstrItineraryData InstrItins;

    const LaserTargetMachine &TM;

    Triple TargetTriple;

    SelectionDAGTargetInfo TSInfo;

    std::unique_ptr<const LaserInstrInfo> InstrInfo;
    std::unique_ptr<const LaserFrameLowering> FrameLowering;
    std::unique_ptr<const LaserTargetLowering> TLInfo;


  public:
    //    const LaserABIInfo &getABI() const;

    /// This constructor initializes the data members to match that
    /// of the specified triple.
    LaserSubtarget(const Triple &TT, const std::string &CPU,
                               const std::string &FS, bool isLittle, 
		   const LaserTargetMachine &_TM);

    /// ParseSubtargetFeatures - Parses features string setting specified
    /// subtarget options.  Definition of function is auto generated by tblgen.
    void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

    bool isLittle() const { return IsLittle; }

    LaserSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
						    const TargetMachine &TM);

    unsigned stackAlignment() const { return 16; }

    const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
      return &TSInfo;
    }

    const LaserInstrInfo *getInstrInfo() const override { return  InstrInfo.get(); }

    const TargetFrameLowering *getFrameLowering() const override {
      return FrameLowering.get();
    }

    const LaserRegisterInfo *getRegisterInfo() const override {
      return &InstrInfo->getRegisterInfo();
    }

    const LaserTargetLowering *getTargetLowering() const override {
      return TLInfo.get();
    }

    const InstrItineraryData *getInstrItineraryData() const override {
      return &InstrItins;
    }

    bool abiUsesSoftFloat() const;
  };


} // End llvm namespace
#endif

